import pika
import re
import time

# Configura√ß√£o de Rate Limiting
requests_per_ip = {}
RATE_LIMIT = 5  # M√°ximo de requisi√ß√µes por minuto

# Simula√ß√£o de Autentica√ß√£o via Token
VALID_TOKENS = {"seu-token-seguro"}

def sanitize_message(message):
    """Valida e sanitiza mensagens"""
    if not isinstance(message, str) or not message.strip():
        return None
    return re.sub(r"[<>;&]", "", message)

def rate_limit(client_ip):
    """Verifica se o IP atingiu o limite de requisi√ß√µes"""
    current_time = time.time()

    if client_ip not in requests_per_ip:
        requests_per_ip[client_ip] = []

    # Remove requisi√ß√µes mais antigas que 60s
    requests_per_ip[client_ip] = [t for t in requests_per_ip[client_ip] if current_time - t < 60]

    if len(requests_per_ip[client_ip]) >= RATE_LIMIT:
        print(f"üö® Rate Limit: IP {client_ip} atingiu o limite de {RATE_LIMIT} requisi√ß√µes por minuto.")
        return False

    requests_per_ip[client_ip].append(current_time)
    return True

# Conectar ao RabbitMQ
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# Criar a fila (caso ainda n√£o exista)
channel.queue_declare(queue='fila_teste')

# Fun√ß√£o que processa mensagens recebidas com seguran√ßa
def callback(ch, method, properties, body):
    try:
        # Extrair headers com tratamento de erro
        headers = properties.headers if properties and properties.headers else {}
        token = headers.get("Authorization", None)
        client_ip = properties.app_id if properties and properties.app_id else "desconhecido"

        # Verificar autentica√ß√£o
        if not token or token not in VALID_TOKENS:
            print(f"üö® Acesso negado para IP {client_ip}: Token inv√°lido ou ausente.")
            return

        # Aplicar rate limiting
        if not rate_limit(client_ip):
            return

        # Processar mensagem
        message = body.decode()
        sanitized_message = sanitize_message(message)

        if not sanitized_message:
            print("‚ö†Ô∏è Mensagem inv√°lida recebida. Descartando...")
            return

        print(f"‚úÖ [Mensagem recebida] IP: {client_ip} | Conte√∫do: {sanitized_message}")

    except Exception as e:
        print(f"‚ùå Erro no processamento da mensagem: {e}")

# Configurar consumo com autentica√ß√£o e rate limiting
channel.basic_consume(queue='fila_teste', on_message_callback=callback, auto_ack=True)

print(' [*] Aguardando mensagens com seguran√ßa. Para sair, pressione CTRL+C')
channel.start_consuming()
